{"config":{"indexing":"full","lang":["en","ru","fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"add_parser/","text":"Adding a parser In this part we will see together how to create a parser that we will add to the list of parsers that are already present. And we will create a parser that will be in charge of parsing YAML . Information In order to be able to follow this part, we recommend that you familiarize yourself with the structure of the bookstore if you have not already done so. Step 1: Creation of the class Class diagram classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface As you can see above, all parsers must implement the DataFormatterInterface! Therefore we will have to implement both methods of the interface. Basic structure We will create a file YamlFormatter.php that we will save in the folder (project_location)/DataParser/DataFormatters/ . This file will contain the source code of our new parser. And here is, below, the minimal code of our parser YAML . YamlFormatter.php (minimal code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } } Implementation of the methods To parse data in array , PHP has a yaml_parse() function. So we will use this method in our toArray() method by passing the data to be parsed to it and that we will retract the result. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } And to parse data from array to yaml format, PHP has a yaml_emit() function. So we will use this method in our convert() method by passing it the array to parse and we will retract the result. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } And here is the final class: YamlFormatter.php (final code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } } Step 2: Configuration of the class In this section we will see together how to add the class we created above so that it can be used. To do this, nothing could be simpler, in the folder (project_location)/DataParser we will add our class as a parser in the file DataFormat.php as illustrated in the source code below: YamlFormatter.php (final code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce of our parser }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // the name of our class } Now that our parser is set up, we can move on to using it in the next chapter. Usage To test the correct operation of our parser we will try to parse an array into YAML . Let's write the following code: YamlFormatter.php (minimal code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); And here is the result: given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 Normally, if you have followed all the steps correctly, you should get the same result as above. Conclusion Now you know how to add a parser to the PHP Data Parser library.","title":"Create your own parser"},{"location":"add_parser/#adding-a-parser","text":"In this part we will see together how to create a parser that we will add to the list of parsers that are already present. And we will create a parser that will be in charge of parsing YAML . Information In order to be able to follow this part, we recommend that you familiarize yourself with the structure of the bookstore if you have not already done so.","title":"Adding a parser"},{"location":"add_parser/#step-1-creation-of-the-class","text":"","title":"Step 1: Creation of the class"},{"location":"add_parser/#class-diagram","text":"classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface As you can see above, all parsers must implement the DataFormatterInterface! Therefore we will have to implement both methods of the interface.","title":"Class diagram"},{"location":"add_parser/#basic-structure","text":"We will create a file YamlFormatter.php that we will save in the folder (project_location)/DataParser/DataFormatters/ . This file will contain the source code of our new parser. And here is, below, the minimal code of our parser YAML . YamlFormatter.php (minimal code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } }","title":"Basic structure"},{"location":"add_parser/#implementation-of-the-methods","text":"To parse data in array , PHP has a yaml_parse() function. So we will use this method in our toArray() method by passing the data to be parsed to it and that we will retract the result. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } And to parse data from array to yaml format, PHP has a yaml_emit() function. So we will use this method in our convert() method by passing it the array to parse and we will retract the result. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } And here is the final class: YamlFormatter.php (final code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } }","title":"Implementation of the methods"},{"location":"add_parser/#step-2-configuration-of-the-class","text":"In this section we will see together how to add the class we created above so that it can be used. To do this, nothing could be simpler, in the folder (project_location)/DataParser we will add our class as a parser in the file DataFormat.php as illustrated in the source code below: YamlFormatter.php (final code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce of our parser }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // the name of our class } Now that our parser is set up, we can move on to using it in the next chapter.","title":"Step 2: Configuration of the class"},{"location":"add_parser/#usage","text":"To test the correct operation of our parser we will try to parse an array into YAML . Let's write the following code: YamlFormatter.php (minimal code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); And here is the result: given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 Normally, if you have followed all the steps correctly, you should get the same result as above.","title":"Usage"},{"location":"add_parser/#conclusion","text":"Now you know how to add a parser to the PHP Data Parser library.","title":"Conclusion"},{"location":"contact/","text":"Contact You can contact us: Github LinkedIn Twitter Discord","title":"Contact"},{"location":"contact/#contact","text":"You can contact us: Github LinkedIn Twitter Discord","title":"Contact"},{"location":"","text":"PHP Data Parser - An easy PHP data parser Introduction PHP Data Parser is designed to facilitate and simplify the classic tasks of data parsing. By providing an all-in-one toolkit to help you parse the various data used in your applications. The purpose of this presentation is to introduce the general concepts of PHP Data Parser, and to give you a quick overview of how these concepts are implemented in PHP Data Parser. If you are eager to start a project, you can start with the tutorial, or dive into the documentation. Supported parsers Here is the list of data types supported by PHP Data Parser: array : PHP array; stdClass : A generic empty class with dynamic properties; JSON : JavaScript Object Notation; XML : Extensible Markup Language; Requirements To use PHP Data parser it is imperative to have the following configuration: PHP version PHP >= PHP 8.1 Quick example of use Here is a quick example of how to use PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Output: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"Home"},{"location":"#php-data-parser-an-easy-php-data-parser","text":"","title":"PHP Data Parser - An easy PHP data parser"},{"location":"#introduction","text":"PHP Data Parser is designed to facilitate and simplify the classic tasks of data parsing. By providing an all-in-one toolkit to help you parse the various data used in your applications. The purpose of this presentation is to introduce the general concepts of PHP Data Parser, and to give you a quick overview of how these concepts are implemented in PHP Data Parser. If you are eager to start a project, you can start with the tutorial, or dive into the documentation.","title":"Introduction"},{"location":"#supported-parsers","text":"Here is the list of data types supported by PHP Data Parser: array : PHP array; stdClass : A generic empty class with dynamic properties; JSON : JavaScript Object Notation; XML : Extensible Markup Language;","title":"Supported parsers"},{"location":"#requirements","text":"To use PHP Data parser it is imperative to have the following configuration: PHP version PHP >= PHP 8.1","title":"Requirements"},{"location":"#quick-example-of-use","text":"Here is a quick example of how to use PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Output: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"Quick example of use"},{"location":"installation/","text":"Installation Requirements To use PHP Data parser it is imperative to have the following configuration: PHP version PHP >= PHP 8.1 Installation via composer Installation command via composer: $ composer require dataparser/dataparser Manual installation To manually install and configure PHP Data parser in your project, please follow these instructions: download the library from repository GutHub ; Unzip the file .zip into a directory in your project; Define in your autoloader the location of the namespace DataParser .; If you have followed all the steps to the letter then there should be no problems. Quick example of usage Here is a quick example of how to use PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Output: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"To use PHP Data parser it is imperative to have the following configuration: PHP version PHP >= PHP 8.1","title":"Requirements"},{"location":"installation/#installation-via-composer","text":"Installation command via composer: $ composer require dataparser/dataparser","title":"Installation via composer"},{"location":"installation/#manual-installation","text":"To manually install and configure PHP Data parser in your project, please follow these instructions: download the library from repository GutHub ; Unzip the file .zip into a directory in your project; Define in your autoloader the location of the namespace DataParser .; If you have followed all the steps to the letter then there should be no problems.","title":"Manual installation"},{"location":"installation/#quick-example-of-usage","text":"Here is a quick example of how to use PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Output: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"Quick example of usage"},{"location":"licence/","text":"Licence MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence "},{"location":"licence/#licence","text":"MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"structure/","text":"Structure of PHP Data Parser In this part we will see in detail the structure of PHP Data Passer, the different classes, the different classes and the relationships between them. Structure In the diagram below you can see the complete list of all classes, interfaces, enumerations that constitute PHP Data Parser. Class diagram classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface How it works Information For reasons of simplicity we have opted for the intermediate data type array which means that if you want to parse, for example, JSON into XML the JSON data will first be parsed into array then into XML. DataFormatterInterface DataFormatterInterface is the interface that will be implemented on each class that will parse the data. UML diagram classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } As you can see on the image above, our interface DataFormatterInterface contains two(2) functions namely: convert(array data) : which takes an array as parameter and will return the parsed data; toArray(mixed data) : which takes as parameter a data and will return a array ; Source code DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; } DataFormat DataFormat is an object that will contain the list of supported enumerations. Class diagram classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } In the diagram above ( DataFormat ), we have listed the supported format types, of which each data type will store the formatter class to use. It is possible to add new data parsing classes, to learn more click here Source code DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; } Formatters In this section we will see the Formatters , i.e. the classes that will take care of the data parsing. Class diagram classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface Source code : JsonFormatter.php We'll take a close look at the source code of the JsonFormatter parser, there's no need to look at the other parsers as they all look pretty much the same. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } Let's see how the convert and toArray functions have been implemented in the JsonFormatter class: convert : here, we take the array passed in parameter and pass it to the json_encode() function of PHP which will convert directly into JSON that we return afterwards; toArray : here, we return the result of the function json_decode() of PHP which will take as first argument the data passed in parameter to and by defining the second parameter to true without which the returned data will be of type stdClass ; DataParser And finally, here we will see DataParser , the class that will load and run all the other classes of the library. Class diagram classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat In the above diagram, the DataParser class is linked to the DataFormat enumeartion by a composition relationship. The class also has an attribute data which will be in charge of storing the data to be parsed. Source code JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } Let's comment the above source code: __construct : the constructor which will create an instance of the class and initialize the attributes (respectively the data to be parsed and the type of the data passed in parameter); convertTo : takes as parameter the parser to use for the output format: On line 19 , we instantiate the class of the parser pass to the constructor and format the data in array on line 21 , we instantiate the class of the parser defined in output and pass to the function convert the formatted data on line 19 that we will then return.","title":"Library's structure"},{"location":"structure/#structure-of-php-data-parser","text":"In this part we will see in detail the structure of PHP Data Passer, the different classes, the different classes and the relationships between them.","title":"Structure of PHP Data Parser"},{"location":"structure/#structure","text":"In the diagram below you can see the complete list of all classes, interfaces, enumerations that constitute PHP Data Parser.","title":"Structure"},{"location":"structure/#class-diagram","text":"classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface","title":"Class diagram"},{"location":"structure/#how-it-works","text":"Information For reasons of simplicity we have opted for the intermediate data type array which means that if you want to parse, for example, JSON into XML the JSON data will first be parsed into array then into XML.","title":"How it works"},{"location":"structure/#dataformatterinterface","text":"DataFormatterInterface is the interface that will be implemented on each class that will parse the data.","title":"DataFormatterInterface"},{"location":"structure/#uml-diagram","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } As you can see on the image above, our interface DataFormatterInterface contains two(2) functions namely: convert(array data) : which takes an array as parameter and will return the parsed data; toArray(mixed data) : which takes as parameter a data and will return a array ;","title":"UML diagram"},{"location":"structure/#source-code","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; }","title":"Source code"},{"location":"structure/#dataformat","text":"DataFormat is an object that will contain the list of supported enumerations.","title":"DataFormat"},{"location":"structure/#class-diagram_1","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } In the diagram above ( DataFormat ), we have listed the supported format types, of which each data type will store the formatter class to use. It is possible to add new data parsing classes, to learn more click here","title":"Class diagram"},{"location":"structure/#source-code_1","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"Source code"},{"location":"structure/#formatters","text":"In this section we will see the Formatters , i.e. the classes that will take care of the data parsing.","title":"Formatters"},{"location":"structure/#class-diagram_2","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface","title":"Class diagram"},{"location":"structure/#source-code-jsonformatterphp","text":"We'll take a close look at the source code of the JsonFormatter parser, there's no need to look at the other parsers as they all look pretty much the same. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } Let's see how the convert and toArray functions have been implemented in the JsonFormatter class: convert : here, we take the array passed in parameter and pass it to the json_encode() function of PHP which will convert directly into JSON that we return afterwards; toArray : here, we return the result of the function json_decode() of PHP which will take as first argument the data passed in parameter to and by defining the second parameter to true without which the returned data will be of type stdClass ;","title":"Source code : JsonFormatter.php"},{"location":"structure/#dataparser","text":"And finally, here we will see DataParser , the class that will load and run all the other classes of the library.","title":"DataParser"},{"location":"structure/#class-diagram_3","text":"classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat In the above diagram, the DataParser class is linked to the DataFormat enumeartion by a composition relationship. The class also has an attribute data which will be in charge of storing the data to be parsed.","title":"Class diagram"},{"location":"structure/#source-code_2","text":"JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } Let's comment the above source code: __construct : the constructor which will create an instance of the class and initialize the attributes (respectively the data to be parsed and the type of the data passed in parameter); convertTo : takes as parameter the parser to use for the output format: On line 19 , we instantiate the class of the parser pass to the constructor and format the data in array on line 21 , we instantiate the class of the parser defined in output and pass to the function convert the formatted data on line 19 that we will then return.","title":"Source code"},{"location":"sourceCode/ArrayFormatter/","text":"ArrayFormatter UML Diagram classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface Source code ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"ArrayFormatter"},{"location":"sourceCode/ArrayFormatter/#arrayformatter","text":"","title":"ArrayFormatter"},{"location":"sourceCode/ArrayFormatter/#uml-diagram","text":"classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface","title":"UML Diagram"},{"location":"sourceCode/ArrayFormatter/#source-code","text":"ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"Source code"},{"location":"sourceCode/DataFormat/","text":"DataFormat UML Diagram classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } Source code DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"DataFormat"},{"location":"sourceCode/DataFormat/#dataformat","text":"","title":"DataFormat"},{"location":"sourceCode/DataFormat/#uml-diagram","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT }","title":"UML Diagram"},{"location":"sourceCode/DataFormat/#source-code","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"Source code"},{"location":"sourceCode/DataFormatterInterface/","text":"DataFormatterInterface UML Diagram classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } Source code DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"DataFormatterInterface"},{"location":"sourceCode/DataFormatterInterface/#dataformatterinterface","text":"","title":"DataFormatterInterface"},{"location":"sourceCode/DataFormatterInterface/#uml-diagram","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array }","title":"UML Diagram"},{"location":"sourceCode/DataFormatterInterface/#source-code","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"Source code"},{"location":"sourceCode/DataParser/","text":"DataParser UML Diagram classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } Source code DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"DataParser"},{"location":"sourceCode/DataParser/#dataparser","text":"","title":"DataParser"},{"location":"sourceCode/DataParser/#uml-diagram","text":"classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) }","title":"UML Diagram"},{"location":"sourceCode/DataParser/#source-code","text":"DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"Source code"},{"location":"sourceCode/DtoFormatter/","text":"DtoFormatter UML Diagram classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface Source code DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"DtoFormatter"},{"location":"sourceCode/DtoFormatter/#dtoformatter","text":"","title":"DtoFormatter"},{"location":"sourceCode/DtoFormatter/#uml-diagram","text":"classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface","title":"UML Diagram"},{"location":"sourceCode/DtoFormatter/#source-code","text":"DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"Source code"},{"location":"sourceCode/JsonFormatter/","text":"JsonFormatter UML Diagram classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface Source code JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"JsonFormatter"},{"location":"sourceCode/JsonFormatter/#jsonformatter","text":"","title":"JsonFormatter"},{"location":"sourceCode/JsonFormatter/#uml-diagram","text":"classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface","title":"UML Diagram"},{"location":"sourceCode/JsonFormatter/#source-code","text":"JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"Source code"},{"location":"sourceCode/XmlFormatter/","text":"XmlFormatter UML Diagram classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface Source code XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"XmlFormatter"},{"location":"sourceCode/XmlFormatter/#xmlformatter","text":"","title":"XmlFormatter"},{"location":"sourceCode/XmlFormatter/#uml-diagram","text":"classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface","title":"UML Diagram"},{"location":"sourceCode/XmlFormatter/#source-code","text":"XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"Source code"},{"location":"ru/add_parser/","text":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u0432. \u0418 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0431\u043e\u0440 YAML . \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443, \u043c\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0432\u0430\u043c \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0435\u0441\u043b\u0438 \u0432\u044b \u044d\u0442\u043e\u0433\u043e \u0435\u0449\u0435 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438. \u0428\u0430\u0433 1: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface \u041a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u044b\u0448\u0435, \u0432\u0441\u0435 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 DataFormatterInterface! \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b YamlFormatter.php , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432 \u043f\u0430\u043f\u043a\u0435 (\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435_\u043f\u0440\u043e\u0435\u043a\u0442\u0430)/DataParser/DataFormatters/ . \u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430\u0448\u0435\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u0410 \u0437\u0434\u0435\u0441\u044c, \u043d\u0438\u0436\u0435, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430 YAML . YamlFormatter.php (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } } \u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0414\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 PHP \u0435\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f yaml_parse() . \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432 \u043d\u0430\u0448\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435 toArray() , \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } \u0410 \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 array \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 yaml , \u0432 PHP \u0435\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f yaml_emit() . \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432 \u043d\u0430\u0448\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435 convert() , \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0435\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430, \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } \u0418 \u0432\u043e\u0442 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441: YamlFormatter.php (\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } } \u0428\u0430\u0433 2: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0432\u044b\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435, \u0432 \u043f\u0430\u043f\u043a\u0435 (\u043c\u0435\u0441\u0442\u043e_\u043f\u0440\u043e\u0435\u043a\u0442\u0430)/DataParser \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u0444\u0430\u0439\u043b DataFormat.php , \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u043d\u0438\u0436\u0435: YamlFormatter.php (\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce de notre parseur }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // le nom de notre classe } \u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0448 \u043f\u0430\u0440\u0441\u0435\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0433\u043b\u0430\u0432\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 YAML . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434: YamlFormatter.php (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); \u0418 \u0432\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0448\u0430\u0433\u0438 \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c\u0443 \u0432\u044b\u0448\u0435. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 PHP Data Parser.","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"ru/add_parser/#_1","text":"\u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u0432. \u0418 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0431\u043e\u0440 YAML . \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443, \u043c\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0432\u0430\u043c \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0435\u0441\u043b\u0438 \u0432\u044b \u044d\u0442\u043e\u0433\u043e \u0435\u0449\u0435 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438.","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"ru/add_parser/#1","text":"","title":"\u0428\u0430\u0433 1: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430"},{"location":"ru/add_parser/#_2","text":"classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface \u041a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u044b\u0448\u0435, \u0432\u0441\u0435 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 DataFormatterInterface! \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430.","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430"},{"location":"ru/add_parser/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b YamlFormatter.php , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432 \u043f\u0430\u043f\u043a\u0435 (\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435_\u043f\u0440\u043e\u0435\u043a\u0442\u0430)/DataParser/DataFormatters/ . \u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430\u0448\u0435\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u0410 \u0437\u0434\u0435\u0441\u044c, \u043d\u0438\u0436\u0435, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430 YAML . YamlFormatter.php (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"ru/add_parser/#_4","text":"\u0414\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 PHP \u0435\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f yaml_parse() . \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432 \u043d\u0430\u0448\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435 toArray() , \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } \u0410 \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 array \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 yaml , \u0432 PHP \u0435\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f yaml_emit() . \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432 \u043d\u0430\u0448\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435 convert() , \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0435\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430, \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } \u0418 \u0432\u043e\u0442 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441: YamlFormatter.php (\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } }","title":"\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432"},{"location":"ru/add_parser/#2","text":"\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0432\u044b\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435, \u0432 \u043f\u0430\u043f\u043a\u0435 (\u043c\u0435\u0441\u0442\u043e_\u043f\u0440\u043e\u0435\u043a\u0442\u0430)/DataParser \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u0444\u0430\u0439\u043b DataFormat.php , \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u043d\u0438\u0436\u0435: YamlFormatter.php (\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce de notre parseur }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // le nom de notre classe } \u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0448 \u043f\u0430\u0440\u0441\u0435\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0433\u043b\u0430\u0432\u0435.","title":"\u0428\u0430\u0433 2: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0430"},{"location":"ru/add_parser/#_5","text":"\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 YAML . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434: YamlFormatter.php (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); \u0418 \u0432\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0448\u0430\u0433\u0438 \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c\u0443 \u0432\u044b\u0448\u0435.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"ru/add_parser/#_6","text":"\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 PHP Data Parser.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"ru/contact/","text":"\u041a\u043e\u043d\u0442\u0430\u043a\u0442 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u0430\u043c\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: Github LinkedIn Twitter Discord","title":"\u041a\u043e\u043d\u0442\u0430\u043a\u0442"},{"location":"ru/contact/#_1","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u0430\u043c\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: Github LinkedIn Twitter Discord","title":"\u041a\u043e\u043d\u0442\u0430\u043a\u0442"},{"location":"ru/","text":"PHP Data Parser - \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 PHP \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 PHP Data Parser \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0440\u0430\u0437\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445. \u0426\u0435\u043b\u044c \u044d\u0442\u043e\u0439 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438 - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 PHP Data Parser, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u0442\u044c \u0432\u0430\u043c \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0431\u0437\u043e\u0440 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u044d\u0442\u0438 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 PHP Data Parser. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u0442\u0435\u0440\u043f\u0438\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0447\u0430\u0442\u044c \u0441 \u0443\u0447\u0435\u0431\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043f\u043e\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 PHP Data Parser: array : PHP \u043c\u0430\u0441\u0441\u0438\u0432\u044b; stdClass : \u041f\u0443\u0441\u0442\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438; JSON : \u041d\u043e\u0442\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 JavaScript; XML : \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438; \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP Data \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: \u0412\u0435\u0440\u0441\u0438\u044f PHP PHP >= PHP 8.1 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0412\u043e\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); \u0412\u044b\u0445\u043e\u0434: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"ru/#php-data-parser-php","text":"","title":"PHP Data Parser - \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 PHP"},{"location":"ru/#_1","text":"PHP Data Parser \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0440\u0430\u0437\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445. \u0426\u0435\u043b\u044c \u044d\u0442\u043e\u0439 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438 - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 PHP Data Parser, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u0442\u044c \u0432\u0430\u043c \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0431\u0437\u043e\u0440 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u044d\u0442\u0438 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 PHP Data Parser. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u0442\u0435\u0440\u043f\u0438\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0447\u0430\u0442\u044c \u0441 \u0443\u0447\u0435\u0431\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043f\u043e\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"ru/#_2","text":"\u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 PHP Data Parser: array : PHP \u043c\u0430\u0441\u0441\u0438\u0432\u044b; stdClass : \u041f\u0443\u0441\u0442\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438; JSON : \u041d\u043e\u0442\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 JavaScript; XML : \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438;","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b"},{"location":"ru/#_3","text":"\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP Data \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: \u0412\u0435\u0440\u0441\u0438\u044f PHP PHP >= PHP 8.1","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f"},{"location":"ru/#_4","text":"\u0412\u043e\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); \u0412\u044b\u0445\u043e\u0434: { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"ru/installation/","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP Data \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: PHP \u0432\u0435\u0440\u0441\u0438\u044f PHP >= PHP 8.1 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 composer \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 composer: $ composer require dataparser/dataparser \u0420\u0443\u0447\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0427\u0442\u043e\u0431\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 PHP Data \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u043d\u0438\u0436\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c: \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 GutHub ; \u0420\u0430\u0441\u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0444\u0430\u0439\u043b .zip \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430; \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0438\u043c\u0435\u043d DataParser \u0432 \u0432\u0430\u0448\u0435\u043c \u0430\u0432\u0442\u043e\u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0435; \u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0432\u0441\u0435 \u0448\u0430\u0433\u0438 \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e. \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0412\u043e\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => '\u0418\u0432\u0430\u043d', 'lastname' => '\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); \u0412\u044b\u0445\u043e\u0434: { \"firstname\" : \"\u0418\u0432\u0430\u043d\" , \"lastname\" : \"\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"ru/installation/#_1","text":"","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"ru/installation/#_2","text":"\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP Data \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: PHP \u0432\u0435\u0440\u0441\u0438\u044f PHP >= PHP 8.1","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f"},{"location":"ru/installation/#composer","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 composer: $ composer require dataparser/dataparser","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 composer"},{"location":"ru/installation/#_3","text":"\u0427\u0442\u043e\u0431\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 PHP Data \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u043d\u0438\u0436\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c: \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 GutHub ; \u0420\u0430\u0441\u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0444\u0430\u0439\u043b .zip \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430; \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0438\u043c\u0435\u043d DataParser \u0432 \u0432\u0430\u0448\u0435\u043c \u0430\u0432\u0442\u043e\u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0435; \u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0432\u0441\u0435 \u0448\u0430\u0433\u0438 \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e.","title":"\u0420\u0443\u0447\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"ru/installation/#_4","text":"\u0412\u043e\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f PHP Data Parser: use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => '\u0418\u0432\u0430\u043d', 'lastname' => '\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); \u0412\u044b\u0445\u043e\u0434: { \"firstname\" : \"\u0418\u0432\u0430\u043d\" , \"lastname\" : \"\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"ru/licence/","text":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u041c\u0418\u0422 \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u043b\u044e\u0431\u043e\u043c\u0443 \u043b\u0438\u0446\u0443, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0443 \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\"), \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u043c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f, \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0441\u0443\u0431\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u043a\u043e\u043f\u0438\u0439 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043b\u0438\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439: \u0412\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u043e\u043c \u043f\u0440\u0430\u0432\u0435 \u0438 \u0434\u0430\u043d\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043a\u043e\u043f\u0438\u0438 \u0438\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f. \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0415 \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415 \u041f\u0420\u0415\u0414\u041e\u0421\u0422\u0410\u0412\u041b\u042f\u0415\u0422\u0421\u042f \"\u041a\u0410\u041a \u0415\u0421\u0422\u042c\", \u0411\u0415\u0417 \u041a\u0410\u041a\u0418\u0425-\u041b\u0418\u0411\u041e \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u0419, \u042f\u0412\u041d\u042b\u0425 \u0418\u041b\u0418 \u041f\u041e\u0414\u0420\u0410\u0417\u0423\u041c\u0415\u0412\u0410\u0415\u041c\u042b\u0425, \u0412\u041a\u041b\u042e\u0427\u0410\u042f, \u041d\u041e \u041d\u0415 \u041e\u0413\u0420\u0410\u041d\u0418\u0427\u0418\u0412\u0410\u042f\u0421\u042c \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u042f\u041c\u0418 \u0422\u041e\u0412\u0410\u0420\u041d\u041e\u0413\u041e \u0421\u041e\u0421\u0422\u041e\u042f\u041d\u0418\u042f, \u041f\u0420\u0418\u0413\u041e\u0414\u041d\u041e\u0421\u0422\u0418 \u0414\u041b\u042f \u041a\u041e\u041d\u041a\u0420\u0415\u0422\u041d\u041e\u0419 \u0426\u0415\u041b\u0418 \u0418 \u041d\u0415\u041d\u0410\u0420\u0423\u0428\u0415\u041d\u0418\u042f \u041f\u0420\u0410\u0412. \u041d\u0418 \u041f\u0420\u0418 \u041a\u0410\u041a\u0418\u0425 \u041e\u0411\u0421\u0422\u041e\u042f\u0422\u0415\u041b\u042c\u0421\u0422\u0412\u0410\u0425 \u0410\u0412\u0422\u041e\u0420\u042b \u0418\u041b\u0418 \u041f\u0420\u0410\u0412\u041e\u041e\u0411\u041b\u0410\u0414\u0410\u0422\u0415\u041b\u0418 \u041d\u0415 \u041d\u0415\u0421\u0423\u0422 \u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0421\u0422\u0418 \u0417\u0410 \u041b\u042e\u0411\u042b\u0415 \u041f\u0420\u0415\u0422\u0415\u041d\u0417\u0418\u0418, \u0423\u0411\u042b\u0422\u041a\u0418 \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0415 \u041e\u0411\u042f\u0417\u0410\u0422\u0415\u041b\u042c\u0421\u0422\u0412\u0410, \u0411\u0423\u0414\u042c \u0422\u041e \u041f\u041e \u0414\u041e\u0413\u041e\u0412\u041e\u0420\u0423, \u0412 \u0420\u0415\u0417\u0423\u041b\u042c\u0422\u0410\u0422\u0415 \u0414\u0415\u041b\u0418\u041a\u0422\u0410 \u0418\u041b\u0418 \u0418\u041d\u042b\u041c \u041e\u0411\u0420\u0410\u0417\u041e\u041c, \u0412\u041e\u0417\u041d\u0418\u041a\u0410\u042e\u0429\u0418\u0415 \u0418\u0417 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0413\u041e \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u042f, \u0412 \u0421\u0412\u042f\u0417\u0418 \u0421 \u041d\u0418\u041c \u0418\u041b\u0418 \u0412 \u0420\u0415\u0417\u0423\u041b\u042c\u0422\u0410\u0422\u0415 \u0415\u0413\u041e \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0425 \u041e\u041f\u0415\u0420\u0410\u0426\u0418\u0419 \u0421 \u041d\u0418\u041c.","title":"Licence "},{"location":"ru/licence/#_1","text":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u041c\u0418\u0422 \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u043b\u044e\u0431\u043e\u043c\u0443 \u043b\u0438\u0446\u0443, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0443 \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\"), \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u043c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f, \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0441\u0443\u0431\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u043a\u043e\u043f\u0438\u0439 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043b\u0438\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439: \u0412\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u043e\u043c \u043f\u0440\u0430\u0432\u0435 \u0438 \u0434\u0430\u043d\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043a\u043e\u043f\u0438\u0438 \u0438\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f. \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0415 \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415 \u041f\u0420\u0415\u0414\u041e\u0421\u0422\u0410\u0412\u041b\u042f\u0415\u0422\u0421\u042f \"\u041a\u0410\u041a \u0415\u0421\u0422\u042c\", \u0411\u0415\u0417 \u041a\u0410\u041a\u0418\u0425-\u041b\u0418\u0411\u041e \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u0419, \u042f\u0412\u041d\u042b\u0425 \u0418\u041b\u0418 \u041f\u041e\u0414\u0420\u0410\u0417\u0423\u041c\u0415\u0412\u0410\u0415\u041c\u042b\u0425, \u0412\u041a\u041b\u042e\u0427\u0410\u042f, \u041d\u041e \u041d\u0415 \u041e\u0413\u0420\u0410\u041d\u0418\u0427\u0418\u0412\u0410\u042f\u0421\u042c \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u042f\u041c\u0418 \u0422\u041e\u0412\u0410\u0420\u041d\u041e\u0413\u041e \u0421\u041e\u0421\u0422\u041e\u042f\u041d\u0418\u042f, \u041f\u0420\u0418\u0413\u041e\u0414\u041d\u041e\u0421\u0422\u0418 \u0414\u041b\u042f \u041a\u041e\u041d\u041a\u0420\u0415\u0422\u041d\u041e\u0419 \u0426\u0415\u041b\u0418 \u0418 \u041d\u0415\u041d\u0410\u0420\u0423\u0428\u0415\u041d\u0418\u042f \u041f\u0420\u0410\u0412. \u041d\u0418 \u041f\u0420\u0418 \u041a\u0410\u041a\u0418\u0425 \u041e\u0411\u0421\u0422\u041e\u042f\u0422\u0415\u041b\u042c\u0421\u0422\u0412\u0410\u0425 \u0410\u0412\u0422\u041e\u0420\u042b \u0418\u041b\u0418 \u041f\u0420\u0410\u0412\u041e\u041e\u0411\u041b\u0410\u0414\u0410\u0422\u0415\u041b\u0418 \u041d\u0415 \u041d\u0415\u0421\u0423\u0422 \u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0421\u0422\u0418 \u0417\u0410 \u041b\u042e\u0411\u042b\u0415 \u041f\u0420\u0415\u0422\u0415\u041d\u0417\u0418\u0418, \u0423\u0411\u042b\u0422\u041a\u0418 \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0415 \u041e\u0411\u042f\u0417\u0410\u0422\u0415\u041b\u042c\u0421\u0422\u0412\u0410, \u0411\u0423\u0414\u042c \u0422\u041e \u041f\u041e \u0414\u041e\u0413\u041e\u0412\u041e\u0420\u0423, \u0412 \u0420\u0415\u0417\u0423\u041b\u042c\u0422\u0410\u0422\u0415 \u0414\u0415\u041b\u0418\u041a\u0422\u0410 \u0418\u041b\u0418 \u0418\u041d\u042b\u041c \u041e\u0411\u0420\u0410\u0417\u041e\u041c, \u0412\u041e\u0417\u041d\u0418\u041a\u0410\u042e\u0429\u0418\u0415 \u0418\u0417 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0413\u041e \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u042f, \u0412 \u0421\u0412\u042f\u0417\u0418 \u0421 \u041d\u0418\u041c \u0418\u041b\u0418 \u0412 \u0420\u0415\u0417\u0423\u041b\u042c\u0422\u0410\u0422\u0415 \u0415\u0413\u041e \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0425 \u041e\u041f\u0415\u0420\u0410\u0426\u0418\u0419 \u0421 \u041d\u0418\u041c.","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f"},{"location":"ru/structure/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP \u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 PHP Data Passer, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0438\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 PHP Data Parser. \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, JSON \u0432 XML , \u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 JSON \u0431\u0443\u0434\u0443\u0442 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d\u044b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 , \u0430 \u0437\u0430\u0442\u0435\u043c \u0432 XML. DataFormatterInterface DataFormatterInterface - \u044d\u0442\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u043c \u0437\u0430 \u0440\u0430\u0437\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u044b\u0448\u0435, \u043d\u0430\u0448 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 DataFormatterInterface \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0435 (2) \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e: Convert(array data) : \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435; toArray(mixed data) : \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 ; \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; } DataFormat DataFormat - \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } \u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0448\u0435 ( DataFormat ) \u043c\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043b\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; } Formatters \u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0424\u043e\u0440\u043c\u0430\u0442\u043e\u0440\u044b , \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 : JsonFormatter.php \u041c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 JsonFormatter , \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 convert \u0438 toArray \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 JsonFormatter : convert : \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0431\u0435\u0440\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e PHP json_encode() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 JSON, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0437\u0430\u0442\u0435\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c; toArray : \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b PHP-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 json_decode() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 to, \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 true , \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f stdClass ; DataParser \u0418, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u0443\u0432\u0438\u0434\u0438\u043c DataParser , \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat \u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0448\u0435 \u043a\u043b\u0430\u0441\u0441 DataParser \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c DataFormat \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f . \u041a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 data , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0437\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0440\u0430\u0437\u0431\u043e\u0440\u0443. \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u041c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 JsonFormatter , \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434: __construct : \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b (\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435); convertTo : \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432\u044b\u0432\u043e\u0434\u0430. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 19 \u043c\u044b \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432 ; \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 21 \u043c\u044b \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 output, \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e convert \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 19 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0437\u0430\u0442\u0435\u043c \u0432\u0435\u0440\u043d\u0435\u043c.","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"ru/structure/#php","text":"\u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 PHP Data Passer, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PHP"},{"location":"ru/structure/#_1","text":"\u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0438\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 PHP Data Parser.","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"ru/structure/#_2","text":"classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"ru/structure/#_3","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, JSON \u0432 XML , \u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 JSON \u0431\u0443\u0434\u0443\u0442 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d\u044b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 , \u0430 \u0437\u0430\u0442\u0435\u043c \u0432 XML.","title":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442"},{"location":"ru/structure/#dataformatterinterface","text":"DataFormatterInterface - \u044d\u0442\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u043c \u0437\u0430 \u0440\u0430\u0437\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"DataFormatterInterface"},{"location":"ru/structure/#uml","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u044b\u0448\u0435, \u043d\u0430\u0448 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 DataFormatterInterface \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0435 (2) \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e: Convert(array data) : \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435; toArray(mixed data) : \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 ;","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/structure/#_4","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/structure/#dataformat","text":"DataFormat - \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.","title":"DataFormat"},{"location":"ru/structure/#_5","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } \u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0448\u0435 ( DataFormat ) \u043c\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043b\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430"},{"location":"ru/structure/#_6","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/structure/#formatters","text":"\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0424\u043e\u0440\u043c\u0430\u0442\u043e\u0440\u044b , \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445.","title":"Formatters"},{"location":"ru/structure/#_7","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"ru/structure/#jsonformatterphp","text":"\u041c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 JsonFormatter , \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 convert \u0438 toArray \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 JsonFormatter : convert : \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0431\u0435\u0440\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e PHP json_encode() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 JSON, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0437\u0430\u0442\u0435\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c; toArray : \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b PHP-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 json_decode() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 to, \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 true , \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f stdClass ;","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 : JsonFormatter.php"},{"location":"ru/structure/#dataparser","text":"\u0418, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u0443\u0432\u0438\u0434\u0438\u043c DataParser , \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.","title":"DataParser"},{"location":"ru/structure/#_8","text":"classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat \u041d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0448\u0435 \u043a\u043b\u0430\u0441\u0441 DataParser \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c DataFormat \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f . \u041a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 data , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0437\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0440\u0430\u0437\u0431\u043e\u0440\u0443.","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0430\u0441\u0441\u0430"},{"location":"ru/structure/#_9","text":"\u041c\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 JsonFormatter , \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434: __construct : \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b (\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435); convertTo : \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432\u044b\u0432\u043e\u0434\u0430. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 19 \u043c\u044b \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432 ; \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 21 \u043c\u044b \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 output, \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e convert \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 19 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0437\u0430\u0442\u0435\u043c \u0432\u0435\u0440\u043d\u0435\u043c.","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/ArrayFormatter/","text":"ArrayFormatter UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"ArrayFormatter"},{"location":"ru/sourceCode/ArrayFormatter/#uml","text":"classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/ArrayFormatter/#_1","text":"ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/DataFormat/","text":"DataFormat UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"DataFormat"},{"location":"ru/sourceCode/DataFormat/#uml","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT }","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/DataFormat/#_1","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/DataFormatterInterface/","text":"DataFormatterInterface UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"DataFormatterInterface"},{"location":"ru/sourceCode/DataFormatterInterface/#uml","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array }","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/DataFormatterInterface/#_1","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/DataParser/","text":"DataParser UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"DataParser"},{"location":"ru/sourceCode/DataParser/#uml","text":"classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) }","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/DataParser/#_1","text":"DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/DtoFormatter/","text":"DtoFormatter UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"DtoFormatter"},{"location":"ru/sourceCode/DtoFormatter/#uml","text":"classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/DtoFormatter/#_1","text":"DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/JsonFormatter/","text":"JsonFormatter UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"JsonFormatter"},{"location":"ru/sourceCode/JsonFormatter/#uml","text":"classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/JsonFormatter/#_1","text":"JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"ru/sourceCode/XmlFormatter/","text":"XmlFormatter UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"XmlFormatter"},{"location":"ru/sourceCode/XmlFormatter/#uml","text":"classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface","title":"UML \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"ru/sourceCode/XmlFormatter/#_1","text":"XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434"},{"location":"fr/add_parser/","text":"Ajout d'un parser Dans cette partie nous allons ensemble voir comment cr\u00e9er un parser que nous allons ajouter \u00e0 la liste des parsers qui sont d\u00e9j\u00e0 pr\u00e9sents. Et nous allons cr\u00e9er un parser qui sera charg\u00e9 de parser du YAML . Information Pour pouvoir suivre cette partie, nous vous r\u00e9commandons si ce n'est pas encore fait de vous familiariser avec la structure de la libraire. Etape 1 : Cr\u00e9ation de la classe Diagramme de classe classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface Comme vous pouvez le voir ci-dessus, tous les parsers doivent impl\u00e9menter l'interface DataFormatterInterface ! Par cons\u00e9quent nous aurons \u00e0 impl\u00e9menter les deux m\u00e9thodes de l'interface. Structure de base Nous allons cr\u00e9er un fichier YamlFormatter.php que nous allons enr\u00e9gistrer dans le dossier (project_location)/DataParser/DataFormatters/ . Ce fichier contiendra le code source de notre nouveau parser. Et voici, ci-dessous, le code minimal de notre parseur YAML . YamlFormatter.php (code minimal) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } } Impl\u00e9mentation des m\u00e9thodes Pour parser des donn\u00e9es en array , PHP poss\u00e8de une fonction yaml_parse() . Nous allons donc utiliser cette m\u00e9thode dans notre m\u00e9thode toArray() en lui passant la donn\u00e9e \u00e0 parser et que nous allons r\u00e9trouner le r\u00e9sultat. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } Et pour parser des donn\u00e9es de array vers le format yaml , PHP poss\u00e8de une fonction yaml_emit() . Nous allons donc utiliser cette m\u00e9thode dans notre m\u00e9thode convert() en lui passant le array \u00e0 parser et que nous allons r\u00e9trouner le r\u00e9sultat. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } Et voici la classe finale : YamlFormatter.php (code final) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } } Etape 2 : Configuration de la classe Dans cette section nous voir ensemble comment ajouter la classe que nous avons cr\u00e9\u00e9 ci-dessus afin qu'elle soit utilisable. Pour ce faire, rien de plus simple, dans le dossier (project_location)/DataParser nous allons ajouter notre classe comme un parseur dans le fichier DataFormat.php comme illustr\u00e9 dans le code source ci-dessous : YamlFormatter.php (code final) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce de notre parseur }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // le nom de notre classe } Maintenant que notre parser est enr\u00e9gistr\u00e9, nous pouvons passer \u00e0 son utilisation au chapitre suivant. Utilisation Pour tester le bon fonctionnement de notre parser nous allons tenter de parser un array en YAML . Ecrivons le code suivant : YamlFormatter.php (code minimal) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); Et voici le r\u00e9sultat obtenu : given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 Normalement, si vous avez bien suivi toutes les \u00e9tapes, vous devrez obtenir le m\u00eame r\u00e9sultat que ci-dessus. Conclusion Maintenant vous savez comment ajouter un parser dans la librairie PHP Data Parser.","title":"Ajout d'un parser"},{"location":"fr/add_parser/#ajout-dun-parser","text":"Dans cette partie nous allons ensemble voir comment cr\u00e9er un parser que nous allons ajouter \u00e0 la liste des parsers qui sont d\u00e9j\u00e0 pr\u00e9sents. Et nous allons cr\u00e9er un parser qui sera charg\u00e9 de parser du YAML . Information Pour pouvoir suivre cette partie, nous vous r\u00e9commandons si ce n'est pas encore fait de vous familiariser avec la structure de la libraire.","title":"Ajout d'un parser"},{"location":"fr/add_parser/#etape-1-creation-de-la-classe","text":"","title":"Etape 1 : Cr\u00e9ation de la classe"},{"location":"fr/add_parser/#diagramme-de-classe","text":"classDiagram direction LR class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class YamlFormatter { } YamlFormatter ..> DataFormatterInterface Comme vous pouvez le voir ci-dessus, tous les parsers doivent impl\u00e9menter l'interface DataFormatterInterface ! Par cons\u00e9quent nous aurons \u00e0 impl\u00e9menter les deux m\u00e9thodes de l'interface.","title":"Diagramme de classe"},{"location":"fr/add_parser/#structure-de-base","text":"Nous allons cr\u00e9er un fichier YamlFormatter.php que nous allons enr\u00e9gistrer dans le dossier (project_location)/DataParser/DataFormatters/ . Ce fichier contiendra le code source de notre nouveau parser. Et voici, ci-dessous, le code minimal de notre parseur YAML . YamlFormatter.php (code minimal) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return ''; } public function toArray(mixed $data) : array { return []; } }","title":"Structure de base"},{"location":"fr/add_parser/#implementation-des-methodes","text":"Pour parser des donn\u00e9es en array , PHP poss\u00e8de une fonction yaml_parse() . Nous allons donc utiliser cette m\u00e9thode dans notre m\u00e9thode toArray() en lui passant la donn\u00e9e \u00e0 parser et que nous allons r\u00e9trouner le r\u00e9sultat. toArray() 1 2 3 public function toArray(mixed $data) : array { return yaml_parse($data); } Et pour parser des donn\u00e9es de array vers le format yaml , PHP poss\u00e8de une fonction yaml_emit() . Nous allons donc utiliser cette m\u00e9thode dans notre m\u00e9thode convert() en lui passant le array \u00e0 parser et que nous allons r\u00e9trouner le r\u00e9sultat. convert() 1 2 3 public function convert(array $data) : mixed { return yaml_emit($data); } Et voici la classe finale : YamlFormatter.php (code final) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class YamlFormatter implements DataFormatterInterface { public function convert(array $data) : mixed { return yaml_emit($data); } public function toArray(mixed $data) : array { return yaml_parse($data); } }","title":"Impl\u00e9mentation des m\u00e9thodes"},{"location":"fr/add_parser/#etape-2-configuration-de-la-classe","text":"Dans cette section nous voir ensemble comment ajouter la classe que nous avons cr\u00e9\u00e9 ci-dessus afin qu'elle soit utilisable. Pour ce faire, rien de plus simple, dans le dossier (project_location)/DataParser nous allons ajouter notre classe comme un parseur dans le fichier DataFormat.php comme illustr\u00e9 dans le code source ci-dessous : YamlFormatter.php (code final) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter, YamlFormatter // namesapce de notre parseur }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; case YAML_FORMAT = YamlFormatter::class; // le nom de notre classe } Maintenant que notre parser est enr\u00e9gistr\u00e9, nous pouvons passer \u00e0 son utilisation au chapitre suivant.","title":"Etape 2 : Configuration de la classe"},{"location":"fr/add_parser/#utilisation","text":"Pour tester le bon fonctionnement de notre parser nous allons tenter de parser un array en YAML . Ecrivons le code suivant : YamlFormatter.php (code minimal) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // autoloading... $data = [ \"given\" => \"Chris\", \"family\"=> \"Dumars\", \"address\"=> [ \"lines\"=> \"458 Walkman Dr. Suite #292\", \"city\"=> \"Royal Oak\", \"state\"=> \"MI\", \"postal\"=> 48046, ], ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $result = $parser->convertTo(DataFormat::YAML_FORMAT); print_r($result); Et voici le r\u00e9sultat obtenu : given: \"Chris\" family: \"Dumars\" address: lines: \"458 Walkman Dr. Suite #292\" city: \"Royal Oak\" state: \"MI\" postal: 48046 Normalement, si vous avez bien suivi toutes les \u00e9tapes, vous devrez obtenir le m\u00eame r\u00e9sultat que ci-dessus.","title":"Utilisation"},{"location":"fr/add_parser/#conclusion","text":"Maintenant vous savez comment ajouter un parser dans la librairie PHP Data Parser.","title":"Conclusion"},{"location":"fr/contact/","text":"Contact Vous pouvez nous contacter : Github LinkedIn Twitter Discord","title":"Contact"},{"location":"fr/contact/#contact","text":"Vous pouvez nous contacter : Github LinkedIn Twitter Discord","title":"Contact"},{"location":"fr/","text":"PHP Data Parser - Un parser de donn\u00e9es PHP simple Introduction PHP Data Parser est con\u00e7u pour faciliter et simplifier les t\u00e2ches classiques du parsing de donn\u00e9es. En fournissant une boite \u00e0 outil tout-en-un pour vous aider \u00e0 parser les diff\u00e9rentes donn\u00e9es utilis\u00e9es dans vos applications. Le but de cette pr\u00e9sentation est d\u2019introduire les concepts g\u00e9n\u00e9raux de PHP Data Parser, et de vous donner un aper\u00e7u rapide de la fa\u00e7on dont ces concepts sont mis en \u0153uvre dans PHP Data Parser. Si vous \u00eates impatient de d\u00e9marrer un projet, vous pouvez commencer avec le tutoriel, ou vous plonger dans la documentation. Parsers pris en charges Voici la liste des types de donn\u00e9es pris en charges par PHP Data Parser : array : les tableaux PHP; stdClass : Une classe g\u00e9n\u00e9rique vide avec des propri\u00e9t\u00e9s dynamiques; JSON : Notation des objets JavaScript; XML : Langage de balisage extensible; Pr\u00e9requis Pour utiliser PHP Data parser il est imp\u00e9ratif d'avoir la configuration suivante : Version de PHP PHP >= PHP 8.1 Exemple rapide d'utilisation Voici un exemple rapide d'utilisation PHP Data Parser : use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Sortie : { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"Accueil"},{"location":"fr/#php-data-parser-un-parser-de-donnees-php-simple","text":"","title":"PHP Data Parser - Un parser de donn\u00e9es PHP simple"},{"location":"fr/#introduction","text":"PHP Data Parser est con\u00e7u pour faciliter et simplifier les t\u00e2ches classiques du parsing de donn\u00e9es. En fournissant une boite \u00e0 outil tout-en-un pour vous aider \u00e0 parser les diff\u00e9rentes donn\u00e9es utilis\u00e9es dans vos applications. Le but de cette pr\u00e9sentation est d\u2019introduire les concepts g\u00e9n\u00e9raux de PHP Data Parser, et de vous donner un aper\u00e7u rapide de la fa\u00e7on dont ces concepts sont mis en \u0153uvre dans PHP Data Parser. Si vous \u00eates impatient de d\u00e9marrer un projet, vous pouvez commencer avec le tutoriel, ou vous plonger dans la documentation.","title":"Introduction"},{"location":"fr/#parsers-pris-en-charges","text":"Voici la liste des types de donn\u00e9es pris en charges par PHP Data Parser : array : les tableaux PHP; stdClass : Une classe g\u00e9n\u00e9rique vide avec des propri\u00e9t\u00e9s dynamiques; JSON : Notation des objets JavaScript; XML : Langage de balisage extensible;","title":"Parsers pris en charges"},{"location":"fr/#prerequis","text":"Pour utiliser PHP Data parser il est imp\u00e9ratif d'avoir la configuration suivante : Version de PHP PHP >= PHP 8.1","title":"Pr\u00e9requis"},{"location":"fr/#exemple-rapide-dutilisation","text":"Voici un exemple rapide d'utilisation PHP Data Parser : use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Sortie : { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" }","title":"Exemple rapide d'utilisation"},{"location":"fr/installation/","text":"Installation Pr\u00e9requis Pour utiliser PHP Data parser il est imp\u00e9ratif d'avoir la configuration suivante : Version de PHP PHP >= PHP 8.1 Installation via composer Commande d'installation via composer : $ composer require dataparser/dataparser Installation manuelle Pour installer et configurer manuellement PHP Data parser dans votre projet, veuillez suivre les instructions suivantes : t\u00e9l\u00e9charger la librairie depuis r\u00e9pertoire GutHub ; D\u00e9compressez le fichier .zip dans le r\u00e9pertoire dans un r\u00e9pertoire de votre projet; D\u00e9finissez au niveau de votre autoloader l'emplacement du namespace \\DataParser ; Si vous avez suivi toutes les \u00e9tapes \u00e0 la lettre alors il ne devrait pas y avoir de probl\u00e8mes. Exemple rapide d'utilisation Voici un exemple rapide d'utilisation PHP Data Parser : use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Sortie : { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"Installation"},{"location":"fr/installation/#prerequis","text":"Pour utiliser PHP Data parser il est imp\u00e9ratif d'avoir la configuration suivante : Version de PHP PHP >= PHP 8.1","title":"Pr\u00e9requis"},{"location":"fr/installation/#installation-via-composer","text":"Commande d'installation via composer : $ composer require dataparser/dataparser","title":"Installation via composer"},{"location":"fr/installation/#installation-manuelle","text":"Pour installer et configurer manuellement PHP Data parser dans votre projet, veuillez suivre les instructions suivantes : t\u00e9l\u00e9charger la librairie depuis r\u00e9pertoire GutHub ; D\u00e9compressez le fichier .zip dans le r\u00e9pertoire dans un r\u00e9pertoire de votre projet; D\u00e9finissez au niveau de votre autoloader l'emplacement du namespace \\DataParser ; Si vous avez suivi toutes les \u00e9tapes \u00e0 la lettre alors il ne devrait pas y avoir de probl\u00e8mes.","title":"Installation manuelle"},{"location":"fr/installation/#exemple-rapide-dutilisation","text":"Voici un exemple rapide d'utilisation PHP Data Parser : use \\DataParser\\{DataParser, DataFormat}; $data = [ 'firstname' => 'John', 'lastname' => 'Doe' ]; $parser = new DataParser($data, DataFormat::ARRAY_FORMAT); $parsedData = $parser->convertTo(DataFormat::JSON_FORMAT); print_r($parsedData); Sortie : { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" } Si vous n'avez aucun(s) bug(s) et que vous avez le m\u00eame r\u00e9sultat, vous \u00eates pr\u00eat \u00e0 utiliser PHP Data Parser.","title":"Exemple rapide d'utilisation"},{"location":"fr/licence/","text":"Licence Licence MIT L'autorisation est accord\u00e9e par la pr\u00e9sente, gratuitement, \u00e0 toute personne obtenant une copie de ce logiciel et des fichiers de documentation associ\u00e9s (le \"logiciel\"), de traiter le logiciel sans restriction, y compris, sans s'y limiter, les droits d'utilisation, de copie, de modification, de fusion, de publication, de distribution, de sous-licence et/ou de vente de copies du logiciel, et d'autoriser les personnes \u00e0 qui le logiciel est fourni \u00e0 le faire, sous r\u00e9serve des conditions suivantes : L'avis de copyright ci-dessus et cet avis d'autorisation doivent \u00eatre inclus dans toutes les copies ou parties substantielles du logiciel. LE LOGICIEL EST FOURNI \" EN L'\u00c9TAT \", SANS GARANTIE D'AUCUNE SORTE, EXPRESSE OU IMPLICITE, Y COMPRIS, MAIS SANS S'Y LIMITER, LES GARANTIES DE QUALIT\u00c9 MARCHANDE, D'AD\u00c9QUATION \u00c0 UN USAGE PARTICULIER ET DE NON-VIOLATION. EN AUCUN CAS, LES AUTEURS OU LES D\u00c9TENTEURS DE DROITS D'AUTEUR NE POURRONT \u00caTRE TENUS RESPONSABLES DE TOUTE R\u00c9CLAMATION, DE TOUT DOMMAGE OU DE TOUTE AUTRE RESPONSABILIT\u00c9, QUE CE SOIT DANS LE CADRE D'UNE ACTION CONTRACTUELLE, D\u00c9LICTUELLE OU AUTRE, D\u00c9COULANT DE OU LI\u00c9E AU LOGICIEL OU \u00c0 SON UTILISATION OU \u00c0 D'AUTRES TRANSACTIONS.","title":"Licence "},{"location":"fr/licence/#licence","text":"Licence MIT L'autorisation est accord\u00e9e par la pr\u00e9sente, gratuitement, \u00e0 toute personne obtenant une copie de ce logiciel et des fichiers de documentation associ\u00e9s (le \"logiciel\"), de traiter le logiciel sans restriction, y compris, sans s'y limiter, les droits d'utilisation, de copie, de modification, de fusion, de publication, de distribution, de sous-licence et/ou de vente de copies du logiciel, et d'autoriser les personnes \u00e0 qui le logiciel est fourni \u00e0 le faire, sous r\u00e9serve des conditions suivantes : L'avis de copyright ci-dessus et cet avis d'autorisation doivent \u00eatre inclus dans toutes les copies ou parties substantielles du logiciel. LE LOGICIEL EST FOURNI \" EN L'\u00c9TAT \", SANS GARANTIE D'AUCUNE SORTE, EXPRESSE OU IMPLICITE, Y COMPRIS, MAIS SANS S'Y LIMITER, LES GARANTIES DE QUALIT\u00c9 MARCHANDE, D'AD\u00c9QUATION \u00c0 UN USAGE PARTICULIER ET DE NON-VIOLATION. EN AUCUN CAS, LES AUTEURS OU LES D\u00c9TENTEURS DE DROITS D'AUTEUR NE POURRONT \u00caTRE TENUS RESPONSABLES DE TOUTE R\u00c9CLAMATION, DE TOUT DOMMAGE OU DE TOUTE AUTRE RESPONSABILIT\u00c9, QUE CE SOIT DANS LE CADRE D'UNE ACTION CONTRACTUELLE, D\u00c9LICTUELLE OU AUTRE, D\u00c9COULANT DE OU LI\u00c9E AU LOGICIEL OU \u00c0 SON UTILISATION OU \u00c0 D'AUTRES TRANSACTIONS.","title":"Licence"},{"location":"fr/structure/","text":"Structure de PHP Data Parser Dans cette partie nous allons voir en d\u00e9tail la structure de PHP Data Passer, les diff\u00e9rentes classes, les diff\u00e9rentes classes ainsi que les r\u00e9lations entre elles. Structure Dans le sch\u00e9ma ci-dessous vous pouvez voir la liste compl\u00e8te de toutes classes, interfaces, enum\u00e9rations qui constitue PHP Data Parser. Diagramme de classes classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface Fonctionnement Information Pour des raisons de simplicit\u00e9 nous avons opt\u00e9 comme type de donn\u00e9es interm\u00e9diaire le type array ce qui veut dire que si vous voulez parser, par exemple, du JSON en XML la donn\u00e9es en JSON sera d'abord parser en array puis en XML. DataFormatterInterface DataFormatterInterface est l'interface qui sera impl\u00e9ment\u00e9e sur chaque classe qui se chargera de parser des les donn\u00e9es. Diagramme UML classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } Comme vous pouvez le voir sur l'image ci-dessus, notre interface DataFormatterInterface contient deux(2) fonctions \u00e0 savoir : convert(array data) : qui prend en param\u00e8tre un array et retournera la donn\u00e9e pars\u00e9e ; toArray(mixed data) : qui prend en param\u00e8tre une donn\u00e9e et retournera un array ; Code source DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; } DataFormat DataFormat est objet qui contiendra la liste des \u00e9numerations pris en charge. Diagramme de classe classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } Dans le diagramme ci-dessus ( DataFormat ), nous avons list\u00e9 la liste des types de format pris en charge, dont chaque type de donn\u00e9es stockera la classe du formateur \u00e0 utiliser. Il est possible d'ajouter de nouvelles classes de parsing de donn\u00e9es, pour en savoir plus cliquez ici Code source DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; } Formatters Dans cette section nous allons voir les Formatters , \u00e0 savoir les classes qui vont s'occuper du parsing des donn\u00e9es. Diagramme de classe classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface Code source : JsonFormatter.php Nous allons voir de pr\u00e8s le code source du parser JsonFormatter , ce pas la peine de voir les autres parsers vu qu'ils ressemblent tous pratiquement. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } Voyons comment ont \u00e9t\u00e9 implement\u00e9e les fonctions convert et toArray dans la classe JsonFormatter : convert : ici, nous prenons le tableau pass\u00e9 en param\u00e8tre et le passons \u00e0 la fonction json_encode() de PHP qui convertira directement en JSON que nous retournons par la suite ; toArray : ici, nous retournons le r\u00e9sultat de la fonction json_decode() de PHP qui prendra comme premier argument la donn\u00e9es pass\u00e9e en param\u00e8tre \u00e0 et en d\u00e9finissant le second param\u00e8tre \u00e0 true sans quoi la donn\u00e9e r\u00e9troun\u00e9e sera de type stdClass ; DataParser Et enfin, ici nous verrons DataParser , la classe qui se chargera de charger et de faire fonctionner toutes les autres classes de la librairie. Diagramme de classe classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat Dans le diagramme ci-dessus, la classe DataParser est li\u00e9e \u00e0 l'\u00e9numeartion DataFormat par une r\u00e9lation de composition . La classe poss\u00e8de aussi un attribut data qui sera charg\u00e9 de stocker la donn\u00e9e \u00e0 parser. Code source JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } Commentons le code source ci-dessus: __construct : le constructeur qui se chargera de cr\u00e9er une instance de la classe et d'initialiser les attributs (respectivement la donn\u00e9e \u00e0 parser et le type de la donn\u00e9e pass\u00e9e en param\u00e8tre) ; convertTo : prend en param\u00e8tre le parseur \u00e0 utiliser pour le format de sortie. Sur la ligne 19 , nous instancions la classe du parseur passer au constructeur et formatons la donn\u00e9es en array sur la ligne 21 , nous instancions la classe du parseur d\u00e9finit en sortie et passons \u00e0 la fonction convert la donn\u00e9e format\u00e9e sur \u00e0 la ligne 19 que nous allons ensuite retourn\u00e9.","title":"Structure de la librairie"},{"location":"fr/structure/#structure-de-php-data-parser","text":"Dans cette partie nous allons voir en d\u00e9tail la structure de PHP Data Passer, les diff\u00e9rentes classes, les diff\u00e9rentes classes ainsi que les r\u00e9lations entre elles.","title":"Structure de PHP Data Parser"},{"location":"fr/structure/#structure","text":"Dans le sch\u00e9ma ci-dessous vous pouvez voir la liste compl\u00e8te de toutes classes, interfaces, enum\u00e9rations qui constitue PHP Data Parser.","title":"Structure"},{"location":"fr/structure/#diagramme-de-classes","text":"classDiagram direction BT class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface DataParser --* DataFormat DataFormat --* DataFormatterInterface","title":"Diagramme de classes"},{"location":"fr/structure/#fonctionnement","text":"Information Pour des raisons de simplicit\u00e9 nous avons opt\u00e9 comme type de donn\u00e9es interm\u00e9diaire le type array ce qui veut dire que si vous voulez parser, par exemple, du JSON en XML la donn\u00e9es en JSON sera d'abord parser en array puis en XML.","title":"Fonctionnement"},{"location":"fr/structure/#dataformatterinterface","text":"DataFormatterInterface est l'interface qui sera impl\u00e9ment\u00e9e sur chaque classe qui se chargera de parser des les donn\u00e9es.","title":"DataFormatterInterface"},{"location":"fr/structure/#diagramme-uml","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } Comme vous pouvez le voir sur l'image ci-dessus, notre interface DataFormatterInterface contient deux(2) fonctions \u00e0 savoir : convert(array data) : qui prend en param\u00e8tre un array et retournera la donn\u00e9e pars\u00e9e ; toArray(mixed data) : qui prend en param\u00e8tre une donn\u00e9e et retournera un array ;","title":"Diagramme UML"},{"location":"fr/structure/#code-source","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { public function convert(array $data) : mixed; public function toArray(mixed $data) : array; }","title":"Code source"},{"location":"fr/structure/#dataformat","text":"DataFormat est objet qui contiendra la liste des \u00e9numerations pris en charge.","title":"DataFormat"},{"location":"fr/structure/#diagramme-de-classe","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } Dans le diagramme ci-dessus ( DataFormat ), nous avons list\u00e9 la liste des types de format pris en charge, dont chaque type de donn\u00e9es stockera la classe du formateur \u00e0 utiliser. Il est possible d'ajouter de nouvelles classes de parsing de donn\u00e9es, pour en savoir plus cliquez ici","title":"Diagramme de classe"},{"location":"fr/structure/#code-source_1","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"Code source"},{"location":"fr/structure/#formatters","text":"Dans cette section nous allons voir les Formatters , \u00e0 savoir les classes qui vont s'occuper du parsing des donn\u00e9es.","title":"Formatters"},{"location":"fr/structure/#diagramme-de-classe_1","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) +toArray(mixed data) array } class ArrayFormatter { } class DtoFormatter { } class JsonFormatter { } class XmlFormatter { } ArrayFormatter ..> DataFormatterInterface DtoFormatter ..> DataFormatterInterface JsonFormatter ..> DataFormatterInterface XmlFormatter ..> DataFormatterInterface","title":"Diagramme de classe"},{"location":"fr/structure/#code-source-jsonformatterphp","text":"Nous allons voir de pr\u00e8s le code source du parser JsonFormatter , ce pas la peine de voir les autres parsers vu qu'ils ressemblent tous pratiquement. JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { public function convert(array $data) { return json_encode($data); } public function toArray(mixed $data) : array { return json_decode($data, true); } } Voyons comment ont \u00e9t\u00e9 implement\u00e9e les fonctions convert et toArray dans la classe JsonFormatter : convert : ici, nous prenons le tableau pass\u00e9 en param\u00e8tre et le passons \u00e0 la fonction json_encode() de PHP qui convertira directement en JSON que nous retournons par la suite ; toArray : ici, nous retournons le r\u00e9sultat de la fonction json_decode() de PHP qui prendra comme premier argument la donn\u00e9es pass\u00e9e en param\u00e8tre \u00e0 et en d\u00e9finissant le second param\u00e8tre \u00e0 true sans quoi la donn\u00e9e r\u00e9troun\u00e9e sera de type stdClass ;","title":"Code source : JsonFormatter.php"},{"location":"fr/structure/#dataparser","text":"Et enfin, ici nous verrons DataParser , la classe qui se chargera de charger et de faire fonctionner toutes les autres classes de la librairie.","title":"DataParser"},{"location":"fr/structure/#diagramme-de-classe_2","text":"classDiagram direction LR class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } class DataFormat { <<enumeration>> } DataParser --* DataFormat Dans le diagramme ci-dessus, la classe DataParser est li\u00e9e \u00e0 l'\u00e9numeartion DataFormat par une r\u00e9lation de composition . La classe poss\u00e8de aussi un attribut data qui sera charg\u00e9 de stocker la donn\u00e9e \u00e0 parser.","title":"Diagramme de classe"},{"location":"fr/structure/#code-source_2","text":"JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 declare(strict_types=1); namespace DataParser; class DataParser { protected mixed $data; protected DataFormat $format; public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } public function convertTo(DataFormat $format) { $data = $this->data; $from = $this->format->value; $to = $format->value; $data_formated = (new $from)->toArray($data); return (new $to)->convert($data_formated); } } Commentons le code source ci-dessus: __construct : le constructeur qui se chargera de cr\u00e9er une instance de la classe et d'initialiser les attributs (respectivement la donn\u00e9e \u00e0 parser et le type de la donn\u00e9e pass\u00e9e en param\u00e8tre) ; convertTo : prend en param\u00e8tre le parseur \u00e0 utiliser pour le format de sortie. Sur la ligne 19 , nous instancions la classe du parseur passer au constructeur et formatons la donn\u00e9es en array sur la ligne 21 , nous instancions la classe du parseur d\u00e9finit en sortie et passons \u00e0 la fonction convert la donn\u00e9e format\u00e9e sur \u00e0 la ligne 19 que nous allons ensuite retourn\u00e9.","title":"Code source"},{"location":"fr/sourceCode/ArrayFormatter/","text":"ArrayFormatter Diagramme UML classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface Code source ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"ArrayFormatter"},{"location":"fr/sourceCode/ArrayFormatter/#diagramme-uml","text":"classDiagram direction BT class ArrayFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } ArrayFormatter ..> DataFormatterInterface","title":"Diagramme UML"},{"location":"fr/sourceCode/ArrayFormatter/#code-source","text":"ArrayFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class ArrayFormatter implements DataFormatterInterface { /** * Retrun de the same array passed in parameter * @param array $data [description] * @return mixed */ public function convert(array $data) : mixed { return $this->toArray($data); } /** * Retrun de the same array passed in parameter * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return $data; } }","title":"Code source"},{"location":"fr/sourceCode/DataFormat/","text":"DataFormat Diagramme UML classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT } Code source DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"DataFormat"},{"location":"fr/sourceCode/DataFormat/#diagramme-uml","text":"classDiagram class DataFormat { <<enumeration>> string ARRAY_FORMAT string JSON_FORMAT string DTO_FORMAT string XML_FORMAT }","title":"Diagramme UML"},{"location":"fr/sourceCode/DataFormat/#code-source","text":"DataFormat.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare(strict_types=1); namespace DataParser; use \\DataParser\\DataFormatters\\{ ArrayFormatter, JsonFormatter, DtoFormatter, XmlFormatter }; enum DataFormat: string { case ARRAY_FORMAT = ArrayFormatter::class; case JSON_FORMAT = JsonFormatter::class; case DTO_FORMAT = DtoFormatter::class; case XML_FORMAT = XmlFormatter::class; }","title":"Code source"},{"location":"fr/sourceCode/DataFormatterInterface/","text":"DataFormatterInterface Diagramme UML classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } Code source DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"DataFormatterInterface"},{"location":"fr/sourceCode/DataFormatterInterface/#diagramme-uml","text":"classDiagram class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array }","title":"Diagramme UML"},{"location":"fr/sourceCode/DataFormatterInterface/#code-source","text":"DataFormatterInterface.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare(strict_types=1); namespace DataParser; interface DataFormatterInterface { /** * Convert from array to implemented data format * @param array $data * @return mixed */ public function convert(array $data) : mixed; /** * Convert data to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array; }","title":"Code source"},{"location":"fr/sourceCode/DataParser/","text":"DataParser Diagramme UML classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) } Code source DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"DataParser"},{"location":"fr/sourceCode/DataParser/#diagramme-uml","text":"classDiagram class DataParser { #mixed data #DataFormat format +__construct(mixed data, DataFormat format) +convertTo(DataFormat format) }","title":"Diagramme UML"},{"location":"fr/sourceCode/DataParser/#code-source","text":"DataParser.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 declare(strict_types=1); namespace DataParser; class DataParser { /** * Data to parse * @var mixed $data */ protected mixed $data; /** * Format type of $data * @var DataFormat $format */ protected DataFormat $format; /** * Contructor * @param mixed $data : data to convert * @param DataFormat : Format type of $data */ public function __construct(mixed $data, DataFormat $format) { $this->data = $data; $this->format = $format; } /** * The function returns the parsed data according to the output format passed in parameter * @param DataFormat $format * @return mixed */ public function convertTo(DataFormat $format) : mixed { $data_formated = (new $this->format->value)->toArray($this->data); return (new $format->value)->convert($data_formated); } }","title":"Code source"},{"location":"fr/sourceCode/DtoFormatter/","text":"DtoFormatter Diagramme UML classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface Code source DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"DtoFormatter"},{"location":"fr/sourceCode/DtoFormatter/#diagramme-uml","text":"classDiagram direction BT class DtoFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } DtoFormatter ..> DataFormatterInterface","title":"Diagramme UML"},{"location":"fr/sourceCode/DtoFormatter/#code-source","text":"DtoFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class DtoFormatter implements DataFormatterInterface { /** * Parse data from array to stdClass * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_decode(json_encode($data)); } /** * Parse data from stdClass to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode(json_encode($data), true); } }","title":"Code source"},{"location":"fr/sourceCode/JsonFormatter/","text":"JsonFormatter Diagramme UML classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface Code source JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"JsonFormatter"},{"location":"fr/sourceCode/JsonFormatter/#diagramme-uml","text":"classDiagram direction BT class JsonFormatter { } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } JsonFormatter ..> DataFormatterInterface","title":"Diagramme UML"},{"location":"fr/sourceCode/JsonFormatter/#code-source","text":"JsonFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class JsonFormatter implements DataFormatterInterface { /** * Parse data from array to JSON * @param array $data * @return mixed */ public function convert(array $data) : mixed { return json_encode($data); } /** * Parse data from JSON to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { return json_decode($data, true); } }","title":"Code source"},{"location":"fr/sourceCode/XmlFormatter/","text":"XmlFormatter Diagramme UML classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface Code source XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"XmlFormatter"},{"location":"fr/sourceCode/XmlFormatter/#diagramme-uml","text":"classDiagram direction BT class XmlFormatter { #arrayToXml(SimpleXMLElement $object, array $data) void } class DataFormatterInterface { <<interface>> +convert(array data) mixed +toArray(mixed data) array } XmlFormatter ..> DataFormatterInterface","title":"Diagramme UML"},{"location":"fr/sourceCode/XmlFormatter/#code-source","text":"XmlFormatter.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 declare(strict_types=1); namespace DataParser\\DataFormatters; use DataParser\\DataFormatterInterface; class XmlFormatter implements DataFormatterInterface { /** * Return parsed data from array to XML by using arrayToXml() * @param array $data * @return mixed */ public function convert(array $data) : mixed { $xml = new \\SimpleXMLElement(' <? xml version = \"1.0\" encoding = \"UTF-8\" ?> <root/>'); $this->arrayToXml($xml, $data); return $xml->asXML(); } /** * Convert data from XML to array * @param mixed $data * @return array */ public function toArray(mixed $data) : array { $xml = simplexml_load_string($data, \"SimpleXMLElement\", LIBXML_NOCDATA); $json = json_encode($xml); $array = json_decode($json,TRUE); return $array; } /** * Parse an array to XML * @param \\SimpleXMLElement $object * @param array $data * @return void */ protected function arrayToXml(\\SimpleXMLElement $object, array $data) : void{ foreach ($data as $key => $value) { $tag = (is_string($key)) ? $key : 'element'; if (is_array($value)) { $new_object = $object->addChild($tag); $this->arrayToXml($new_object, $value); } else { $object->addChild($tag, strval($value)); } } } }","title":"Code source"}]}